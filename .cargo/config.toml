[env]
# macOS-specific configuration
MACOSX_DEPLOYMENT_TARGET = "15.0"

# macOS Apple Silicon (M1/M2/M3) - using Accelerate framework
[target.aarch64-apple-darwin]
rustflags = [
    "-C", "link-arg=-mmacosx-version-min=15.0",
    "-C", "link-arg=-framework", "-C", "link-arg=Accelerate"
]

# macOS Intel - using Accelerate framework
[target.x86_64-apple-darwin]
rustflags = [
    "-C", "link-arg=-mmacosx-version-min=15.0",
    "-C", "link-arg=-framework", "-C", "link-arg=Accelerate"
]

# Linux x86_64 configuration
[target.x86_64-unknown-linux-gnu]
rustflags = [
    "-C", "link-arg=-lopenblas",
]

# Linux ARM64 configuration
[target.aarch64-unknown-linux-gnu]
rustflags = [
  "-C", "link-arg=-L /usr/lib/aarch64-linux-gnu/",
  "-C", "link-arg=-lopenblas64"
]

# === Windows ===
# Option 1: Using vcpkg
#   vcpkg install openblas:x64-windows
#   Then uncomment and adjust the vcpkg paths above
#
# Option 2: Using MSYS2/MinGW64
#   pacman -S mingw-w64-x86_64-openblas
#
# Option 3: Intel MKL (alternative to OpenBLAS)
#   Download and install Intel oneAPI Math Kernel Library
#   Set appropriate environment variables

# Windows MSVC x86_64 configuration
[target.x86_64-pc-windows-msvc]
rustflags = [
    # Windows typically uses Intel MKL or OpenBLAS through vcpkg
    # Uncomment and adjust paths if using vcpkg OpenBLAS:
    # "-C", "link-arg=/LIBPATH:C:\\vcpkg\\installed\\x64-windows\\lib",
    # "-C", "link-arg=openblas.lib"
]

# Windows GNU x86_64 configuration
[target.x86_64-pc-windows-gnu]
rustflags = [
    # For MinGW/MSYS2 with OpenBLAS
    # "-C", "link-arg=-lopenblas"
]
